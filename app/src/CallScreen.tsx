import { Call, CallAgent } from "@azure/communication-calling";
import {
  CommunicationUserIdentifier,
  MicrosoftTeamsUserIdentifier,
  PhoneNumberIdentifier,
  UnknownIdentifier,
} from "@azure/communication-common";
import {
  CallAgentProvider,
  CallClientProvider,
  CallProvider,
  FluentThemeProvider,
  StatefulCallClient,
} from "@azure/communication-react";
import { useEffect } from "react";
import CallingComponents from "./CallingComponents";
export interface CallScreenProps {
  callClient: StatefulCallClient;
  callAgent: CallAgent;
  receiverId: { communicationUserId: string } | { id: string };
  call: Call;
}

export const CallScreen = (props: CallScreenProps): JSX.Element => {
  const { callClient, callAgent, receiverId, call } = props;

  useEffect(() => {
    if (callAgent && !call) {
      const call = callAgent.startCall([receiverId], {});
      console.log(`CallId ${call?.id}`);
    }
  }, [call, callAgent, receiverId]);

  /**
   * Something like this should be in the handlers like how screen share and end call buttons are.
   * Callable through usePropsFor(`HoldBu`tton).
   * We would want 2 new handlers onHold() and onResume() in CreateHandlers.ts
   * @returns Call back to hold the call
   */
  const onToggleHold = async (): Promise<void> => {
    if (call?.state === "LocalHold") {
      return await call?.resume();
    } else {
      return await call?.hold();
    }
  };

  /**
   * Something similar will need to be added to the CreateHandlers.ts file
   *
   * We will need to also figure out how to store the callerId Phone number in state, or figure out how calling stores that
   * information. When we use the userId to make a callClient I wonder if we override that callerInfo.Identifier
   * - possible way around this, allow the callClient to also be generated by a phoneNumberKind instead of just a CommunicationUserIdentifierKind
   */
  const onAddParticipant = async (
    participant: string,
    caller: string
  ): Promise<void> => {
    call?.addParticipant(
      { phoneNumber: participant },
      { alternateCallerId: { phoneNumber: caller } }
    );
  };

  const onRemoveParticipant = async (
    participant:
      | PhoneNumberIdentifier
      | CommunicationUserIdentifier
      | MicrosoftTeamsUserIdentifier
      | UnknownIdentifier
  ): Promise<void> => {
    call?.removeParticipant(participant);
  };

  return (
    <>
      <FluentThemeProvider>
        <CallClientProvider callClient={callClient}>
          <CallAgentProvider callAgent={callAgent}>
            {call && (
              <CallProvider call={call}>
                <CallingComponents
                  callId={call.id}
                  onToggleHold={onToggleHold}
                  caller={"callerNumber"}
                  onAddParticipant={onAddParticipant}
                  onRemoveParticipant={onRemoveParticipant}
                />
              </CallProvider>
            )}
          </CallAgentProvider>
        </CallClientProvider>
      </FluentThemeProvider>
    </>
  );
};
